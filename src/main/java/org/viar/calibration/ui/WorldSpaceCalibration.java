package org.viar.calibration.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;
import org.viar.calibration.CalibrationDataCollector;
import org.viar.calibration.WorldCoordinatesPresets;
import org.viar.core.TrackingListener;
import org.viar.core.model.CameraSpaceFrame;
import org.viar.core.model.WorldSpaceVertex;

import javax.annotation.PostConstruct;
import javax.swing.*;
import java.awt.*;
import java.util.Collection;
import java.util.stream.Collectors;

@Profile("calibration")
@Component
public class WorldSpaceCalibration implements TrackingListener {

    private JFrame frame;
    private JTextPane realtimeResults;
    private JComboBox presetSelect;
    private JButton doCapture;
    private JButton doSave;
    private JButton doLoadAndCalibrate;
    private JCheckBox chkStartStopTracking;
    private JCheckBox chkShutdownTrackers;
    private JTextField tfFileName;
    private JPanel toolBar;
    private JPanel mainContainer;

    @Autowired
    private WorldCoordinatesPresets coordProvider;

    @Autowired
    private CalibrationDataCollector dataCollector;

    private Collection<CameraSpaceFrame> cameraSpaceSamples;

    @PostConstruct
    private void init() throws Exception {

        frame = new JFrame("Camera calibration");
        frame.add(mainContainer);

        frame.setFocusTraversalKeysEnabled(false);
        frame.setFocusable(true);


        presetSelect.setModel(new DefaultComboBoxModel(coordProvider.getPresetNames()));

        doCapture.addActionListener(e -> {
            dataCollector.submitDataSample(presetSelect.getSelectedItem().toString(), cameraSpaceSamples);
            if (presetSelect.getSelectedIndex() < presetSelect.getItemCount() - 1) {
                presetSelect.setSelectedIndex(presetSelect.getSelectedIndex() + 1);
            }
        });

        doSave.addActionListener(e -> dataCollector.save(tfFileName.getText()));

        doLoadAndCalibrate.addActionListener(e -> dataCollector.solveExtrinsicAndSave(tfFileName.getText()));

        frame.setSize(1800, 800);
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }

    @Override
    public void trackingUpdated(Collection<CameraSpaceFrame> rawData, Collection<WorldSpaceVertex> resolved, long timeMillis) {
        SwingUtilities.invokeLater(() -> {
            cameraSpaceSamples = rawData;

            StringBuilder sb = new StringBuilder();
            if (resolved != null) {
                sb.append("\n\n");
                for (WorldSpaceVertex k : resolved) {
                    sb.append(String.format("%s - %.3f, %.3f, %.3f\n", k.getId(), k.getX(), k.getY(), k.getZ()));
                }
            }

            for (CameraSpaceFrame e : rawData) {
                sb.append("cam-").append(e.getCameraName()).append("\n")
                        .append(e.getArucos().stream().map(
                                (p) -> String.format("%d: (%.3f,%.3f)", p.getId(), p.getX(), p.getY())
                        ).collect(Collectors.joining(" "))).append("\n\n");
            }

            frame.setTitle("Camera calibration. Time: " + timeMillis);
            realtimeResults.setText(sb.toString());
        });
    }

    public void show(String text) {
        SwingUtilities.invokeLater(() -> {
            realtimeResults.setText(text);
        });
    }

    public boolean isTracking() {
        return chkStartStopTracking.isSelected();
    }

    public boolean isShutdownTrackers() {
        return chkShutdownTrackers.isSelected();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainContainer = new JPanel();
        mainContainer.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        realtimeResults = new JTextPane();
        realtimeResults.setBackground(new Color(-1));
        realtimeResults.setEditable(false);
        Font realtimeResultsFont = UIManager.getFont("PasswordField.font");
        if (realtimeResultsFont != null) realtimeResults.setFont(realtimeResultsFont);
        mainContainer.add(realtimeResults, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        toolBar = new JPanel();
        toolBar.setLayout(new GridLayoutManager(1, 7, new Insets(5, 5, 5, 5), -1, -1));
        mainContainer.add(toolBar, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        presetSelect = new JComboBox();
        toolBar.add(presetSelect, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        doCapture = new JButton();
        doCapture.setText("Capture!");
        toolBar.add(doCapture, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        doSave = new JButton();
        doSave.setText("Save");
        toolBar.add(doSave, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        doLoadAndCalibrate = new JButton();
        doLoadAndCalibrate.setText("Load and Calibrate");
        toolBar.add(doLoadAndCalibrate, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chkStartStopTracking = new JCheckBox();
        chkStartStopTracking.setText("Tracking");
        toolBar.add(chkStartStopTracking, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chkShutdownTrackers = new JCheckBox();
        chkShutdownTrackers.setText("ShutdownTrackers");
        toolBar.add(chkShutdownTrackers, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tfFileName = new JTextField();
        toolBar.add(tfFileName, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainContainer;
    }

}
